// This class is Auto-Generated by the Script Tool in the Language Source
using UnityEngine;

namespace I2.Loc
{
	public static class ScriptLocalization
	{
		public static string Get( string Term ) { return Get( Term, false, 0); }
		public static string Get( string Term, bool FixForRTL ) { return Get( Term, FixForRTL, 0); }
		public static string Get( string Term, bool FixForRTL, int maxLineLengthForRTL ) { return LocalizationManager.GetTermTranslation(Term, FixForRTL, maxLineLengthForRTL); }


		public static class Bluetooth
		{
			public static string ConnectDeviceTipText 		{ get{ return Get ("Bluetooth/ConnectDeviceTipText"); } }
			public static string ListButtonText 		{ get{ return Get ("Bluetooth/ListButtonText"); } }
			public static string NoneDeviceTipText 		{ get{ return Get ("Bluetooth/NoneDeviceTipText"); } }
			public static string QRCodeButtonText 		{ get{ return Get ("Bluetooth/QRCodeButtonText"); } }
			public static string QRCodePanelTipText 		{ get{ return Get ("Bluetooth/QRCodePanelTipText"); } }
			public static string selectTipText 		{ get{ return Get ("Bluetooth/selectTipText"); } }
		}

		public static class Bluetooth_Tips
		{
			public static string BluetoothConnectedFailed 		{ get{ return Get ("Bluetooth/Tips/BluetoothConnectedFailed"); } }
			public static string BluetoothConnectedSuccessed 		{ get{ return Get ("Bluetooth/Tips/BluetoothConnectedSuccessed"); } }
			public static string BluetoothConnectTimeout 		{ get{ return Get ("Bluetooth/Tips/BluetoothConnectTimeout"); } }
			public static string BluetoothConnectting 		{ get{ return Get ("Bluetooth/Tips/BluetoothConnectting"); } }
			public static string BluetoothDefaultPreName 		{ get{ return Get ("Bluetooth/Tips/BluetoothDefaultPreName"); } }
			public static string BluetoothDisconnected 		{ get{ return Get ("Bluetooth/Tips/BluetoothDisconnected"); } }
			public static string BluetoothReconnecting 		{ get{ return Get ("Bluetooth/Tips/BluetoothReconnecting"); } }
			public static string CloseString 		{ get{ return Get ("Bluetooth/Tips/CloseString"); } }
			public static string ConnectedString 		{ get{ return Get ("Bluetooth/Tips/ConnectedString"); } }
			public static string ConnectString 		{ get{ return Get ("Bluetooth/Tips/ConnectString"); } }
			public static string NoneDeviceTip 		{ get{ return Get ("Bluetooth/Tips/NoneDeviceTip"); } }
			public static string NoneSelectTip 		{ get{ return Get ("Bluetooth/Tips/NoneSelectTip"); } }
			public static string OpenBluetoothInSettingPlease 		{ get{ return Get ("Bluetooth/Tips/OpenBluetoothInSettingPlease"); } }
			public static string QRCodeError 		{ get{ return Get ("Bluetooth/Tips/QRCodeError"); } }
			public static string QRCodeInvalid 		{ get{ return Get ("Bluetooth/Tips/QRCodeInvalid"); } }
			public static string QRCodeSuccessed 		{ get{ return Get ("Bluetooth/Tips/QRCodeSuccessed"); } }
			public static string RenameFailed 		{ get{ return Get ("Bluetooth/Tips/RenameFailed"); } }
			public static string RenameNoDevice 		{ get{ return Get ("Bluetooth/Tips/RenameNoDevice"); } }
			public static string RenameSuccess 		{ get{ return Get ("Bluetooth/Tips/RenameSuccess"); } }
			public static string SelectConnectModePanelTipNoneDevice 		{ get{ return Get ("Bluetooth/Tips/SelectConnectModePanelTipNoneDevice"); } }
		}

		public static string Arial 		{ get{ return Get ("Arial"); } }
		public static string LanguageChange 		{ get{ return Get ("LanguageChange"); } }

		public static class Network
		{
			public static string NetError 		{ get{ return Get ("Network/NetError"); } }
			public static string NoneNet 		{ get{ return Get ("Network/NoneNet"); } }
		}

		public static class TipWindow
		{
			public static string CancelText 		{ get{ return Get ("TipWindow/CancelText"); } }
			public static string ConfirmText 		{ get{ return Get ("TipWindow/ConfirmText"); } }
			public static string ExitText 		{ get{ return Get ("TipWindow/ExitText"); } }
			public static string NoCameraAuthorization 		{ get{ return Get ("TipWindow/NoCameraAuthorization"); } }
			public static string ProcessText 		{ get{ return Get ("TipWindow/ProcessText"); } }
			public static string TryAgainText 		{ get{ return Get ("TipWindow/TryAgainText"); } }
		}

	}
}
